We have talked about scope chain, now let us talk about Variable declaration in the execution context.

How variables are actually created in js.

In js, we have a concept known as hoisting which makes some type of variables accessible/usable in the code before they are actually declared in the code.'Variables are lifted to the top of their scope'.

So, what happens is that the code is scanned for variable declarations and for each variable, a new property is created in the variable environment object.

But it does not work the same for all the variable types.

It works for function declarations.

function calcAge(){
    ...
}

It works for var variables but these variables are given undefined value before initrialization, so if our code is using var variable, then it will also get undefined in that variable.


It works for let and const variables all but they are uninitialized which makes it seem that thay are not hoisted at all.
Something called TDZ(Temporal Dead Zone) is used there.


It works for function expressions and arrow functions based on the var or let/const variable used to declare those functions.


TEMPORAL DEAD ZONE, LET AND CONST :-
In the example code, the job variable is not accessible in the block of code from start of that block to the line before where job is defined because that area id TDZ(Temporal Dead Zone) for that const variable.

TDZ applies only to const and let variables.

Now, if we try to use the variable in it's TDZ , we will get reference error saying that the variable can not be accessed before initialization which means that this variable has been declared already due to hoisting but can not be used as it is uninitialized as it is a const variable. If a var variable would have been there, we would get undefined because this is what it would have been initialized with at that stage.

But, job has been defined, just not initialized because it has been set in the varaibel env. to uninitialized.


Summary:- Each and every let and const variable have a TDZ which starts at the beginning of it's scope and ends at the line before it is defined.

Variable is only safe to use after TDZ.


WHY TDZ:-
makes it easier to avoid and catch errors.

Another reason is to make TDZ is to make const variable behave as they do, so it would not be possible to set them to undefined first and then reassign them later as const can only be initialized once.



WHY HOISTING:-
This was created by the creator so that we can use function declarations in our code before thyey are defined.

var hoisting is just a byproduct of function declaration hoisting which is not that great in the long run.


So, we now use let and const to work around this.












