How is js code executed?

We know that it happens inside the callstack in the js engine but let us dig a bit deeper in it.

When our code has just finished compiling and is ready for execution what happens is that a 
global execution context is created for the top-level code.

Top-level code is the code that is not inside any function means for the variables and function declaration.


An execution context is an abstract concept but we can define it as an environment in which a piece of js is executed. It is like a box which contains all the necessary info. for some code to be executed such as local variables and arguments passed into a function.


js code always runs inside an execution context.

In any js project no matter how large, there is only ever one Global Execution Context.It's 
always there as the default context and it's where the top-level code is executed.

The next step in execution of js code after creation of Global Execution Context is the execution of top-level code which is inside Global EC.



After that, functions finally start to execute. For that, an execution context is created for each function call which contains all the necassary information needed to execute that function and same goes for methods.


All these exeution contexts together make up the call stack. 

When all these functions are done executing, the engine will keep waiting for the callback functions to arrive so that it can execute them. For e.x. -> a callback function associated with a click event.

It is the event loop which provides these callback functions to the execution context.


Now,we know what an execution engine is but do not know what it is made up of. 

The first thing that is inside the execution context is a so-called variable environment.

In this env. all the variables and function declaration are stored and also contains an arguments object which contains all the arguments that were passed into the function that the current execution context belongs to.

Remember each function gets its own execution context as soon as it is called.

The functions can also access the variables that are declared outside them by the use of scope chain.

Scope chain contains the references to variables located outside the functions and these scope chains exist inside each execution context.

Each execution context contains a special keyword called the this keyword.

The content of EC (variable env., scope chain,
and this keyword) is created just before the excution phase.

Note:- The EC of arrow functions does not have arguments object and this keyword in them.
They can us ethe argument object and this keyword from their closest regular function parent.

Thye illustraion of how the execution contexts are created in js engine is shown in the ss illustration_of_EC_Creation.png.


Now, we know how the execution contexts are created but how will the js engine know which code is currently being executed, with the help of call stack.


So, what happens is, on starting of execution of code the GEC is created and loaded on the call stack and it's line of code start to execute one by one.

As soon as a function is called in it's code, the EC for that function is created and is loaded onto the call stack and now the code of that functions starts to execute and code of GEC pauses on that function call.


Now, when a function is called in that function, EC for that function is created and loaded onto the Call Stack and execution starts for that function and execution pauses for first function as js is single-threaded and it can execute one thing at a time.

As soon as second function return i.e. completes, it is popped off from the t=op of call stack and execution of first function resumes and it gets popped off on it's completion.

Now, the GEC resumes it's execution and code execution is completed but GEC is not popped off from the call stack as long as we do not close that web app from browser or the program is really finished. Then ,the GEC is popped off the stack.

SUMMARY:-
Actually, Code runs inside of execution contexts inside the call stack.


The call stack is like a map for js engine beacuse it makes sure the order of eceution never gets lost.













