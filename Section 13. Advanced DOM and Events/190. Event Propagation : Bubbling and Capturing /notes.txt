js events have a very important property. They have a so-called capturing phase and a bubbling phase.

In the diagram, we have an HTML document along with a DOM Tree but only for the anchor element.

When someone clicks on the link of anchor element, then an event is generated right away at the root of the document i.e. 
the document element at the very top of the DOM tree.

From there, the so-called capturing phase happens where the event travels from the document root to the target element 
and as the event travels down the tree, it will pass through every single parent of the target element in the DOM tree 
until the event finally reaches the target.

On reaching the target element, the target phase begins where events can be handled right at the target, we do that 
with eventListeners.

So, eventListeners wait for an event to occur on an element and as soon as that happens, it executes the attached 
callback function. This happens in the target phase.

Now after reaching the target, the event then travels all the way up to the document root in the bubbling phase and passes 
all the parent elements of the target element, not through any sibling elements.


Now, when the event travels from the target element to the top of the document element in the bubbling phase, it is as if the 
event happend in the parent elements as well through which the event passed and thus we can handle that event on each 
of the parent as well, as if the event happend on them. 


This is a very crucial functionality as it will allow us to implement powerful things.

By default, events can only be handled in the target and the bubbling phase, but we can also set up eventListeners in 
a way that they handle events in the capturing phase instead. 


Also, not all the events have a capturing and bubbling phase, they are created directly at the target elements and 
we can only handle them there but most have capturing and bubbling phase.

This capturing and bubbling of events is event propagation.
